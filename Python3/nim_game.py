# needed for python unit testings
# https://docs.python.org/3/library/unittest.html
import unittest

# required for type hinting
# https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html
from typing import List, Dict, Set, Optional

class Solution:
    '''
    The Nim game is defined by the following:
    * Initially, there is a heap of stones on the table.
    * Two players will alternate taking turns.
    * On each turn, remove one to three stones from the heap.
    * the player who removes the last stone wins.

    Given n, the number of stones in the heap, return true if it is possible to
    win the game, assuming first play and play, otherwise return false.
    '''
    # memory error (range of n: 1 <= n <= 2^31 - 1)
    def canWinNim_memory(self, n: int) -> bool:
        if n < 4:
            return True
        stones = [False] * n
        stones[0] = True
        stones[1] = True
        stones[2] = True
        for i in range(3, n):
            stones[i] = not stones[i - 1] or not stones[i - 2] or not stones[i - 3]
        return stones[n-1]

    # takes way too long
    def canWinNim_tle(self, n: int) -> bool:
        if n < 4:
            return True
        a = True # 3 stone
        b = True # 2 stone
        c = True # 1 stone
        for i in range(3, n):
            a,b,c = not a or not b or not c, a, b
        return a

    # mind fuck... had to look at the pattern generated by memory error solution
    def canWinNim(self, n: int) -> bool:
        return n % 4 != 0

class UnitTesting(unittest.TestCase):
    def test_one(self):
        s = Solution()
        i = 4
        o = False
        self.assertEqual(s.canWinNim(i), o)

    def test_two(self):
        s = Solution()
        i = 1
        o = True
        self.assertEqual(s.canWinNim(i), o)

    def test_three(self):
        s = Solution()
        i = 2
        o = True
        self.assertEqual(s.canWinNim(i), o)

    def test_four(self):
        s = Solution()
        i = 88
        o = False
        self.assertEqual(s.canWinNim(i), o)

    def test_five(self):
        s = Solution()
        i = 2020
        o = False
        self.assertEqual(s.canWinNim(i), o)

    def test_six(self):
        s = Solution()
        i = 22222222
        o = True
        self.assertEqual(s.canWinNim(i), o)

    def test_seven(self):
        s = Solution()
        i = 2147483647
        o = True
        self.assertEqual(s.canWinNim(i), o)

if __name__ == '__main__':
    unittest.main(verbosity=2)