# needed for python unit testings
# https://docs.python.org/3/library/unittest.html
import unittest

# required for type hinting
# https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html
from typing import List

class Solution:
    '''
    Given a string s consisting only of letters 'a' and 'b'. In a single
    step one palindromic subsequence can be removed from s.

    Return the minimum number of steps to make the given string empty.

    A string is a subsequence of a given string if it is generated by
    deleting some characters of a given string without changing its
    order. Note that a subsequence does not necessarily need to be
    contiguous.

    A string is called a palindrome if is read the same backward as well
    as forward.
    '''
    def removePalindromeSub_A(self, s: str) -> int:
        a = 0
        b = len(s) - 1
        while a <= b:
            if s[a] == s[b]:
                a += 1
                b -= 1
            else:
                break
        return 1 if b < a else 2

    def removePalindromeSub_B(self, s: str) -> int:
        a, b = 0, len(s) - 1
        while a <= b:
            if s[a] != s[b]:
                return 2
            a += 1
            b -= 1
        return 1

    def removePalindromeSub_C(self, s: str) -> int:
        while s:
            if s[0] != s[-1]:
                return 2
            s = s[1:-1]
        return 1

    def removePalindromeSub_D(self, s: str) -> int:
        # note that s[::-1] is using slice to reverse string
        if s == s[::-1]:
            return 1
        return 2

class UnitTesting(unittest.TestCase):
    def test_one(self):
        s = Solution()
        i = "ababa"
        o = 1
        self.assertEqual(s.removePalindromeSub(i), o)

    def test_two(self):
        s = Solution()
        i = "abb"
        o = 2
        self.assertEqual(s.removePalindromeSub(i), o)

    def test_three(self):
        s = Solution()
        i = "baabb"
        o = 2
        self.assertEqual(s.removePalindromeSub(i), o)

    def test_four(self):
        s = Solution()
        i = "babaabb"
        o = 2
        self.assertEqual(s.removePalindromeSub(i), o)

if __name__ == '__main__':
    unittest.main(verbosity=2)