# needed for python unit testings
# https://docs.python.org/3/library/unittest.html
import unittest

# required for type hinting
# https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html
from typing import List

class Solution:
    '''
    Given two strings s and t.

    String t is generated by random shuffling string s and then adding
    an additional letter at a random position.

    Return the letter that was added to t.
    '''
    def findTheDifference_counter(self, s: str, t: str) -> str:
        from collections import Counter
        c = Counter()
        for i, j in zip(s, t):
            c[i] -= 1
            c[j] += 1
        c[t[-1]] += 1
        for k in c:
            if c[k]:
                return k
        return None

    def findTheDifference_counter_improved(self, s: str, t: str) -> str:
        from collections import Counter
        cs = Counter(s)
        ct = Counter(t)
        for i in ct:
            if cs[i] < ct[i]:
                return i

    def findTheDifference_dict(self, s: str, t: str) -> str:
        c = dict()
        for i, j in zip(s, t):
            if i in c:
                c[i] -= 1
            else:
                c[i] = -1
            if j in c:
                c[j] += 1
            else:
                c[j] = 1
        if t[-1] in c:
            c[t[-1]] += 1
        else:
            return t[-1]
        for k in c:
            if c[k]:
                return k
        return None

    def findTheDifference_list(self, s: str, t: str) -> str:
        c = [0] * 26
        for i, j in zip(s, t):
            c[ord(i)-ord('a')] -= 1
            c[ord(j)-ord('a')] += 1
        c[ord(t[-1])-ord('a')] += 1
        for i,j in enumerate(c):
            if j:
                return chr(i+ord('a'))
        return None

    def findTheDifference_sort(self, s: str, t: str) -> str:
        s = list(s)
        s.sort()
        t = list(t)
        t.sort()
        for i, j in zip(s,t):
            if i != j:
                return j
        return t[-1]

    def findTheDifference_sum(self, s: str, t: str) -> str:
        c = 0
        for i in t:
            c += ord(i)
        for i in s:
            c -= ord(i)
        return chr(c)

class UnitTesting(unittest.TestCase):
    def test_one(self):
        s = Solution()
        i = "abcd"
        t = "abcde"
        o = "e"
        self.assertEqual(s.findTheDifference_counter(i,t), o)
        self.assertEqual(s.findTheDifference_counter_improved(i,t), o)
        self.assertEqual(s.findTheDifference_dict(i,t), o)
        self.assertEqual(s.findTheDifference_list(i,t), o)
        self.assertEqual(s.findTheDifference_sort(i,t), o)
        self.assertEqual(s.findTheDifference_sum(i,t), o)

    def test_two(self):
        s = Solution()
        i = ""
        t = "y"
        o = "y"
        self.assertEqual(s.findTheDifference_counter(i,t), o)
        self.assertEqual(s.findTheDifference_counter_improved(i,t), o)
        self.assertEqual(s.findTheDifference_dict(i,t), o)
        self.assertEqual(s.findTheDifference_list(i,t), o)
        self.assertEqual(s.findTheDifference_sort(i,t), o)
        self.assertEqual(s.findTheDifference_sum(i,t), o)

    def test_three(self):
        s = Solution()
        i = "ihwrdisrhgxwbfevrxbtzgsywhnzleueadikniwyuasflpsviobwvsmydmyzppqjlmzakpbnouyttdigkcdzypvcqxbttmblttehgjlnpjwpzoprntifysfatjboasottnkpyyvmdcafpjicfpgmbwqdsaxdmmdmupnwhkpxixpdwmczntqtushemvavofszomtsrafzmxctpidjadwcwggdbyliqmcvuwscryfsvlvfrhfphmxvcnytbctomicwdwjjmdhmcqtnlqgixxdyjydhwnftkobotbhsgykawhtvnkxoykwkgvtqioqoiilergxlpuujabiug"
        t = "gyptmtjntxlusjhbzkbgowslthwtytdnflsyfsgfytzrodatykdyvgsmvxsuemijitvodmwrrqmcabhwzyoouorfckhisjpduoxvtmttzvwmicdxsovsabmpcpppzycuwbmpihmxadmvkkwerimhgwdwdtvqwbwtetppkpkbcaifuqbenagycdqatklciaczcpglxmvfaqnwpnssdmnhcmifeyndzttvypwlgpttvhswoiijybchbvzklgngqziyaczowgwiufqyhxxdqjrxolddgnmriijopdsikqwtyhplhubrljfjanexxyfvjmudxsomnfbafntpib"
        o = "z"
        self.assertEqual(s.findTheDifference_counter(i,t), o)
        self.assertEqual(s.findTheDifference_counter_improved(i,t), o)
        self.assertEqual(s.findTheDifference_dict(i,t), o)
        self.assertEqual(s.findTheDifference_list(i,t), o)
        self.assertEqual(s.findTheDifference_sort(i,t), o)
        self.assertEqual(s.findTheDifference_sum(i,t), o)

if __name__ == '__main__':
    unittest.main(verbosity=2)